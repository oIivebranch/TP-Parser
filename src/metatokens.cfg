'tokens': {
	'use golang-style': true
	
	/**
	 * Max tokens per tokenization.
	 * Value of 0 will tokenize the ENTIRE source code in one go
	 * So be careful when lexing all at once as you can consume alot of memory.
	 */
	'on demand':    0
	
	/**
	 * This option allows lexing comments as tokens.
	 * Disable to ignore comments in general.
	 */
	'tokenize comments': false
	
	'comments': {
		/// Single-line comments have an empty string value.
		"//":      ""
		
		/// Multi-line comments have their ending symbols as their value.
		"/*":      "*/"
	}
	
	/// token literals for Targum are C/Golang-like.
	'invalid':     IOTA    /// IOTA's first is 0. Token value of 0 is considered INVALID.
	'comment':     IOTA
	'identifier':  IOTA
	'integer':     IOTA
	'float':       IOTA
	'string':      IOTA
	'rune':        IOTA
	
	/// optional, comment out using /**/ to prevent lexing whitespace.
	/*'whitespace': {
		//'space':   IOTA
		//'tab':     IOTA
		'newline': IOTA
	}*/
	
	'keywords': {
		//"int":            IOTA,
		//"bool":           IOTA,
		//"str":            IOTA,
		//"rune":           IOTA,
		//"float":          IOTA,
		//"ident":          IOTA,
		
		"rule":           IOTA,
		"type":           IOTA,
		"if":             IOTA,
		"else":           IOTA,
		"for":            IOTA,
		"match":          IOTA,
		
		"stop":           IOTA, /// replaces break
		"pass":           IOTA, /// replaces continue.
		"return":         IOTA,
	}
	
	'operators': {
		"(":   IOTA,
		")":   IOTA,
		"[":   IOTA,
		"]":   IOTA,
		"{":   IOTA,
		"}":   IOTA,
		"+=":  IOTA,
		"==":  IOTA,
		"&&":  IOTA,
		"||":  IOTA,
		//".":   IOTA,
		",":   IOTA,
		":=":  IOTA,
		"=":   IOTA,
		"!=":  IOTA,
		";":   IOTA,
	}
	/*
	Remember that we have to allow exporting C types like structs.
	Builtin native types will be int, string, bool, Node, Token, Lexer, etc.
	Node.tag is a field which will invoke the creation of the hash table.
		-- Lexer-based builtins.
			advance() Token
			backtrack(amount int) bool
			peek(amount int) Token
			expect(phrase Token)
			//got(phrases ...Token) bool
			pos(t Token) ...int   NOTE: this builtin can return 1 or more ints.
		
		-- Other Builtins.
			user(...) ...
			err(message_fmt string,  ...) ...
			warn(message_fmt string, ...) ...
			list(separators Token, func) []Node
	*/
}